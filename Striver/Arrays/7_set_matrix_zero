\\ Additional Memory Approach
\\ Time Complexity: O(M x N)
\\ Space Complexity : O(M + N)

void setZeroes(vector<vector<int>> matrix) {
    int R = matrix.size();
    int C = matrix[0].size();
    set<int> rows;
    set<int> cols;

    // Essentially, we mark the rows and columns that are to be made zero
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (matrix[i][j] == 0) {
          rows.insert(i);
          cols.insert(j);
        }
      }
    }

    // Iterate over the array once again and using the rows and cols sets, update the elements.
    for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
        if (rows.find(i) < R || cols.find(j) < C) {
          matrix[i][j] = 0;
        }
      }
    }
  }



\\ Optimized Approach
\\ Time Complexity: O(M x N)
\\ Space Complexity : O(1)


void setZeroes(vector<vector<int>> matrix) {
bool isCol = false;
int R = matrix.size();
int C = matrix[0].size();

    for (int i = 0; i < R; i++) {

        if (matrix[i][0] == 0) {
            isCol = true;
        }
        for (int j = 1; j < C; j++) {
            if (matrix[i][j] == 0) {
            matrix[0][j] = 0;
            matrix[i][0] = 0;
            }
        }
    }

    for (int i = 1; i < R; i++) {
        for (int j = 1; j < C; j++) {
            if (matrix[i][0] == 0 || matrix[0][j] == 0) {
            matrix[i][j] = 0;
            }
        }
    }

    if (matrix[0][0] == 0) {
        for (int j = 0; j < C; j++) {
            matrix[0][j] = 0;
        }
    }

    if (isCol) {
        for (int i = 0; i < R; i++) {
            matrix[i][0] = 0;
        }
    }
}
